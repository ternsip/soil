package com.ternsip.soil.graph.display;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.joml.Vector2f;
import org.joml.Vector2i;
import org.joml.Vector3i;
import org.joml.Vector4i;
import org.lwjgl.BufferUtils;
import org.lwjgl.glfw.GLFWVidMode;

import java.nio.IntBuffer;
import java.text.NumberFormat;

import static org.lwjgl.opengl.ARBImaging.GL_BLEND_COLOR;
import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.opengl.GL11.glGetInteger;
import static org.lwjgl.opengl.GL12.GL_ALIASED_LINE_WIDTH_RANGE;
import static org.lwjgl.opengl.GL12.GL_MAX_3D_TEXTURE_SIZE;
import static org.lwjgl.opengl.GL12.GL_MAX_ELEMENTS_INDICES;
import static org.lwjgl.opengl.GL12.GL_MAX_ELEMENTS_VERTICES;
import static org.lwjgl.opengl.GL12.GL_PACK_IMAGE_HEIGHT;
import static org.lwjgl.opengl.GL12.GL_PACK_SKIP_IMAGES;
import static org.lwjgl.opengl.GL12.GL_SMOOTH_LINE_WIDTH_GRANULARITY;
import static org.lwjgl.opengl.GL12.GL_SMOOTH_LINE_WIDTH_RANGE;
import static org.lwjgl.opengl.GL12.GL_TEXTURE_BINDING_3D;
import static org.lwjgl.opengl.GL12.GL_UNPACK_IMAGE_HEIGHT;
import static org.lwjgl.opengl.GL12.GL_UNPACK_SKIP_IMAGES;
import static org.lwjgl.opengl.GL13.GL_ACTIVE_TEXTURE;
import static org.lwjgl.opengl.GL13.GL_COMPRESSED_TEXTURE_FORMATS;
import static org.lwjgl.opengl.GL13.GL_MAX_CUBE_MAP_TEXTURE_SIZE;
import static org.lwjgl.opengl.GL13.GL_NUM_COMPRESSED_TEXTURE_FORMATS;
import static org.lwjgl.opengl.GL13.GL_SAMPLES;
import static org.lwjgl.opengl.GL13.GL_SAMPLE_BUFFERS;
import static org.lwjgl.opengl.GL13.GL_SAMPLE_COVERAGE_INVERT;
import static org.lwjgl.opengl.GL13.GL_SAMPLE_COVERAGE_VALUE;
import static org.lwjgl.opengl.GL13.GL_TEXTURE_BINDING_CUBE_MAP;
import static org.lwjgl.opengl.GL13.GL_TEXTURE_COMPRESSION_HINT;
import static org.lwjgl.opengl.GL14.GL_BLEND_DST_ALPHA;
import static org.lwjgl.opengl.GL14.GL_BLEND_DST_RGB;
import static org.lwjgl.opengl.GL14.GL_BLEND_SRC_ALPHA;
import static org.lwjgl.opengl.GL14.GL_BLEND_SRC_RGB;
import static org.lwjgl.opengl.GL14.GL_MAX_TEXTURE_LOD_BIAS;
import static org.lwjgl.opengl.GL14.GL_POINT_FADE_THRESHOLD_SIZE;
import static org.lwjgl.opengl.GL15.GL_ARRAY_BUFFER_BINDING;
import static org.lwjgl.opengl.GL15.GL_ELEMENT_ARRAY_BUFFER_BINDING;
import static org.lwjgl.opengl.GL20.*;
import static org.lwjgl.opengl.GL21.GL_PIXEL_PACK_BUFFER_BINDING;
import static org.lwjgl.opengl.GL21.GL_PIXEL_UNPACK_BUFFER_BINDING;
import static org.lwjgl.opengl.GL30.GL_CONTEXT_FLAGS;
import static org.lwjgl.opengl.GL30.GL_DRAW_FRAMEBUFFER_BINDING;
import static org.lwjgl.opengl.GL30.GL_MAJOR_VERSION;
import static org.lwjgl.opengl.GL30.GL_MAX_ARRAY_TEXTURE_LAYERS;
import static org.lwjgl.opengl.GL30.GL_MAX_CLIP_DISTANCES;
import static org.lwjgl.opengl.GL30.GL_MAX_PROGRAM_TEXEL_OFFSET;
import static org.lwjgl.opengl.GL30.GL_MAX_RENDERBUFFER_SIZE;
import static org.lwjgl.opengl.GL30.GL_MAX_SAMPLES;
import static org.lwjgl.opengl.GL30.GL_MAX_VARYING_COMPONENTS;
import static org.lwjgl.opengl.GL30.GL_MINOR_VERSION;
import static org.lwjgl.opengl.GL30.GL_NUM_EXTENSIONS;
import static org.lwjgl.opengl.GL30.GL_READ_FRAMEBUFFER_BINDING;
import static org.lwjgl.opengl.GL30.GL_RENDERBUFFER_BINDING;
import static org.lwjgl.opengl.GL30.GL_TEXTURE_BINDING_1D_ARRAY;
import static org.lwjgl.opengl.GL30.GL_TEXTURE_BINDING_2D_ARRAY;
import static org.lwjgl.opengl.GL30.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING;
import static org.lwjgl.opengl.GL30.GL_VERTEX_ARRAY_BINDING;
import static org.lwjgl.opengl.GL31.GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
import static org.lwjgl.opengl.GL31.GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS;
import static org.lwjgl.opengl.GL31.GL_MAX_COMBINED_UNIFORM_BLOCKS;
import static org.lwjgl.opengl.GL31.GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
import static org.lwjgl.opengl.GL31.GL_MAX_FRAGMENT_UNIFORM_BLOCKS;
import static org.lwjgl.opengl.GL31.GL_MAX_GEOMETRY_UNIFORM_BLOCKS;
import static org.lwjgl.opengl.GL31.GL_MAX_RECTANGLE_TEXTURE_SIZE;
import static org.lwjgl.opengl.GL31.GL_MAX_TEXTURE_BUFFER_SIZE;
import static org.lwjgl.opengl.GL31.GL_MAX_UNIFORM_BLOCK_SIZE;
import static org.lwjgl.opengl.GL31.GL_MAX_UNIFORM_BUFFER_BINDINGS;
import static org.lwjgl.opengl.GL31.GL_MAX_VERTEX_UNIFORM_BLOCKS;
import static org.lwjgl.opengl.GL31.GL_PRIMITIVE_RESTART_INDEX;
import static org.lwjgl.opengl.GL31.GL_TEXTURE_BINDING_BUFFER;
import static org.lwjgl.opengl.GL31.GL_TEXTURE_BINDING_RECTANGLE;
import static org.lwjgl.opengl.GL31.GL_UNIFORM_BUFFER_BINDING;
import static org.lwjgl.opengl.GL31.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT;
import static org.lwjgl.opengl.GL32.GL_MAX_COLOR_TEXTURE_SAMPLES;
import static org.lwjgl.opengl.GL32.GL_MAX_DEPTH_TEXTURE_SAMPLES;
import static org.lwjgl.opengl.GL32.GL_MAX_FRAGMENT_INPUT_COMPONENTS;
import static org.lwjgl.opengl.GL32.GL_MAX_GEOMETRY_INPUT_COMPONENTS;
import static org.lwjgl.opengl.GL32.GL_MAX_GEOMETRY_OUTPUT_COMPONENTS;
import static org.lwjgl.opengl.GL32.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS;
import static org.lwjgl.opengl.GL32.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS;
import static org.lwjgl.opengl.GL32.GL_MAX_INTEGER_SAMPLES;
import static org.lwjgl.opengl.GL32.GL_MAX_SAMPLE_MASK_WORDS;
import static org.lwjgl.opengl.GL32.GL_MAX_SERVER_WAIT_TIMEOUT;
import static org.lwjgl.opengl.GL32.GL_MAX_VERTEX_OUTPUT_COMPONENTS;
import static org.lwjgl.opengl.GL32.GL_PROGRAM_POINT_SIZE;
import static org.lwjgl.opengl.GL32.GL_PROVOKING_VERTEX;
import static org.lwjgl.opengl.GL32.GL_TEXTURE_BINDING_2D_MULTISAMPLE;
import static org.lwjgl.opengl.GL32.GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY;
import static org.lwjgl.opengl.GL33.GL_MAX_DUAL_SOURCE_DRAW_BUFFERS;
import static org.lwjgl.opengl.GL33.GL_SAMPLER_BINDING;
import static org.lwjgl.opengl.GL33.GL_TIMESTAMP;
import static org.lwjgl.opengl.GL41.GL_IMPLEMENTATION_COLOR_READ_FORMAT;
import static org.lwjgl.opengl.GL41.GL_IMPLEMENTATION_COLOR_READ_TYPE;
import static org.lwjgl.opengl.GL41.GL_LAYER_PROVOKING_VERTEX;
import static org.lwjgl.opengl.GL41.GL_MAX_FRAGMENT_UNIFORM_VECTORS;
import static org.lwjgl.opengl.GL41.GL_MAX_VARYING_VECTORS;
import static org.lwjgl.opengl.GL41.GL_MAX_VERTEX_UNIFORM_VECTORS;
import static org.lwjgl.opengl.GL41.GL_MAX_VIEWPORTS;
import static org.lwjgl.opengl.GL41.GL_NUM_PROGRAM_BINARY_FORMATS;
import static org.lwjgl.opengl.GL41.GL_NUM_SHADER_BINARY_FORMATS;
import static org.lwjgl.opengl.GL41.GL_PROGRAM_PIPELINE_BINDING;
import static org.lwjgl.opengl.GL41.GL_SHADER_COMPILER;
import static org.lwjgl.opengl.GL41.GL_VIEWPORT_BOUNDS_RANGE;
import static org.lwjgl.opengl.GL41.GL_VIEWPORT_INDEX_PROVOKING_VERTEX;
import static org.lwjgl.opengl.GL41.GL_VIEWPORT_SUBPIXEL_BITS;
import static org.lwjgl.opengl.GL42.GL_MAX_COMBINED_ATOMIC_COUNTERS;
import static org.lwjgl.opengl.GL42.GL_MAX_FRAGMENT_ATOMIC_COUNTERS;
import static org.lwjgl.opengl.GL42.GL_MAX_GEOMETRY_ATOMIC_COUNTERS;
import static org.lwjgl.opengl.GL42.GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS;
import static org.lwjgl.opengl.GL42.GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS;
import static org.lwjgl.opengl.GL42.GL_MAX_VERTEX_ATOMIC_COUNTERS;
import static org.lwjgl.opengl.GL42.GL_MIN_MAP_BUFFER_ALIGNMENT;
import static org.lwjgl.opengl.GL43.*;
import static org.lwjgl.opengl.GL43.GL_MAX_ELEMENT_INDEX;

@Slf4j
public class GLInfo {

    public static final NumberFormat NUMBER_FORMAT_INT = NumberFormat.getIntegerInstance();

    public static void logInfo(int programID) {
        int activeAttributes = glGetProgrami(programID, GL_ACTIVE_ATTRIBUTES);
        IntBuffer attributeType = BufferUtils.createIntBuffer(1);
        IntBuffer attributeSize = BufferUtils.createIntBuffer(1);
        for (int index = 0; index < Math.min(256, activeAttributes); ++index) {
            String attributeName = glGetActiveAttrib(programID, index, attributeSize, attributeType);
            log.debug("Active attribute[{}]: {}", index, attributeName);
        }
    }

    public static void logInfo() {

        // TODO finish this - Если раскоментировать то некоторые комманды могут привести к случайным крашам, нужно аккуратно раскоменчивать и проверять
        // TODO многие логгеры нужно вынести на уровень только там где это доступно, например работа с атрибутами или буферами или фидбеком итп

        // https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glGet.xhtml
    //    log.info("Active texture: {}", glGetInteger(GL_ACTIVE_TEXTURE));
    //    log.info("Aliased line width range: {}", glGetVector2i(GL_ALIASED_LINE_WIDTH_RANGE).toString(NUMBER_FORMAT_INT));
    //    log.info("Array buffer binding: {}", glGetInteger(GL_ARRAY_BUFFER_BINDING));
    //    log.info("Blending: {}", glGetInteger(GL_BLEND));
    //    log.info("Blend color: {}", glGetVector4i(GL_BLEND_COLOR).toString(NUMBER_FORMAT_INT));
    //    log.info("Blend dst alpha: {}", glGetInteger(GL_BLEND_DST_ALPHA));
    //    log.info("Blend dst rgb: {}", glGetInteger(GL_BLEND_DST_RGB));
    //    log.info("Blend equation rgb: {}", glGetInteger(GL_BLEND_EQUATION_RGB));
    //    log.info("Blend equation alpha: {}", glGetInteger(GL_BLEND_EQUATION_ALPHA));
    //    log.info("Blend src alpha: {}", glGetInteger(GL_BLEND_SRC_ALPHA));
    //    log.info("Blend src rgb: {}", glGetInteger(GL_BLEND_SRC_RGB));
    //    log.info("Color clear value: {}", glGetVector4i(GL_COLOR_CLEAR_VALUE).toString(NUMBER_FORMAT_INT));
    //    log.info("Color logic op: {}", glGetInteger(GL_COLOR_LOGIC_OP));
    //    log.info("Color write mask: {}", glGetVector4i(GL_COLOR_WRITEMASK).toString(NUMBER_FORMAT_INT));
    //    log.info("Number of compressed texture formats: {}", glGetInteger(GL_COMPRESSED_TEXTURE_FORMATS));
    //    log.info("Max compute shader storage blocks: {}", glGetInteger(GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS));
    //    log.info("Max combined shader storage blocks: {}", glGetInteger(GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS));
    //    log.info("Max compute uniform blocks: {}", glGetInteger(GL_MAX_COMPUTE_UNIFORM_BLOCKS));
    //    log.info("Max compute texture image units: {}", glGetInteger(GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS));
    //    log.info("Max compute uniform components: {}", glGetInteger(GL_MAX_COMPUTE_UNIFORM_COMPONENTS));
    //    log.info("Max compute atomic counters: {}", glGetInteger(GL_MAX_COMPUTE_ATOMIC_COUNTERS));
    //    log.info("Max compute atomic counter buffers: {}", glGetInteger(GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS));
    //    log.info("Max combined compute uniform components: {}", glGetInteger(GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS));
    //    log.info("Max compute work group invocations: {}", glGetInteger(GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS));
    //    log.info("Dispatch indirect buffer binding: {}", glGetInteger(GL_DISPATCH_INDIRECT_BUFFER_BINDING));
    //    log.info("Max debug group stack depth: {}", glGetInteger(GL_MAX_DEBUG_GROUP_STACK_DEPTH));
    //    log.info("Debug group stack depth: {}", glGetInteger(GL_DEBUG_GROUP_STACK_DEPTH));
    //    log.info("Context flags: {}", glGetInteger(GL_CONTEXT_FLAGS));
    //    log.info("Cull face: {}", glGetInteger(GL_CULL_FACE));
    //    log.info("Cull face mode: {}", glGetInteger(GL_CULL_FACE_MODE));
    //    log.info("Current program: {}", glGetInteger(GL_CURRENT_PROGRAM));
    //    log.info("Depth clear value: {}", glGetInteger(GL_DEPTH_CLEAR_VALUE));
    //    log.info("Depth func: {}", glGetInteger(GL_DEPTH_FUNC));
    //    log.info("Depth range: {}", glGetVector2i(GL_DEPTH_RANGE).toString(NUMBER_FORMAT_INT));
    //    log.info("Depth test: {}", glGetInteger(GL_DEPTH_TEST));
    //    log.info("Depth write mask: {}", glGetInteger(GL_DEPTH_WRITEMASK));
    //    log.info("Dither: {}", glGetInteger(GL_DITHER));
    //    log.info("Double buffer: {}", glGetInteger(GL_DOUBLEBUFFER));
    //    log.info("Draw buffer: {}", glGetInteger(GL_DRAW_BUFFER));
    //    log.info("Draw framebuffer binding: {}", glGetInteger(GL_DRAW_FRAMEBUFFER_BINDING));
    //    log.info("Read framebuffer binding: {}", glGetInteger(GL_READ_FRAMEBUFFER_BINDING));
    //    log.info("Element array buffer binding: {}", glGetInteger(GL_ELEMENT_ARRAY_BUFFER_BINDING));
    //    log.info("Fragment shader derivative hint: {}", glGetInteger(GL_FRAGMENT_SHADER_DERIVATIVE_HINT));
    //    log.info("Implementation color read format: {}", glGetInteger(GL_IMPLEMENTATION_COLOR_READ_FORMAT));
    //    log.info("Implementation color read type: {}", glGetInteger(GL_IMPLEMENTATION_COLOR_READ_TYPE));
    //    log.info("Line smooth: {}", glGetInteger(GL_LINE_SMOOTH));
    //    log.info("Line smooth hint: {}", glGetInteger(GL_LINE_SMOOTH_HINT));
    //    log.info("Line width: {}", glGetInteger(GL_LINE_WIDTH));
    //    log.info("Layer provoking vertex: {}", glGetInteger(GL_LAYER_PROVOKING_VERTEX));
    //    log.info("Logic op mode: {}", glGetInteger(GL_LOGIC_OP_MODE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAJOR_VERSION));
    //    log.info("Max 3d texture (W/H/D) size: {}", glGetInteger(GL_MAX_3D_TEXTURE_SIZE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_ARRAY_TEXTURE_LAYERS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_CLIP_DISTANCES));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_COLOR_TEXTURE_SAMPLES));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_COMBINED_ATOMIC_COUNTERS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS));
    //    log.info("Max max combined texture image units: {}", glGetInteger(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_COMBINED_UNIFORM_BLOCKS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS));
    //    log.info("Max cube map texture (W/H) size: {}", glGetInteger(GL_MAX_CUBE_MAP_TEXTURE_SIZE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_DEPTH_TEXTURE_SAMPLES));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_DRAW_BUFFERS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_DUAL_SOURCE_DRAW_BUFFERS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_ELEMENTS_INDICES));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_ELEMENTS_VERTICES));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_FRAGMENT_ATOMIC_COUNTERS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_FRAGMENT_INPUT_COMPONENTS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_FRAGMENT_UNIFORM_COMPONENTS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_FRAGMENT_UNIFORM_VECTORS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_FRAGMENT_UNIFORM_BLOCKS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_FRAMEBUFFER_WIDTH));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_FRAMEBUFFER_HEIGHT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_FRAMEBUFFER_LAYERS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_FRAMEBUFFER_SAMPLES));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_GEOMETRY_ATOMIC_COUNTERS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_GEOMETRY_INPUT_COMPONENTS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_GEOMETRY_OUTPUT_COMPONENTS));
    //    log.info("Max geometry texture image units: {}", glGetInteger(GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_GEOMETRY_UNIFORM_BLOCKS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_GEOMETRY_UNIFORM_COMPONENTS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_INTEGER_SAMPLES));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MIN_MAP_BUFFER_ALIGNMENT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_LABEL_LENGTH));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_PROGRAM_TEXEL_OFFSET));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_RECTANGLE_TEXTURE_SIZE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_RENDERBUFFER_SIZE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_SAMPLE_MASK_WORDS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_SERVER_WAIT_TIMEOUT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_TEXTURE_BUFFER_SIZE));
    //    log.info("Max texture image units: {}", glGetInteger(GL_MAX_TEXTURE_IMAGE_UNITS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_TEXTURE_LOD_BIAS));
    //    log.info("Max texture size: {}", glGetInteger(GL_MAX_TEXTURE_SIZE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_UNIFORM_BUFFER_BINDINGS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_UNIFORM_BLOCK_SIZE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_UNIFORM_LOCATIONS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_VARYING_COMPONENTS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_VARYING_VECTORS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_VARYING_FLOATS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_VERTEX_ATOMIC_COUNTERS));
    //    log.info("Max vertex attributes: {}", glGetInteger(GL_MAX_VERTEX_ATTRIBS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS));
    //    log.info("Max vertex texture image units: {}", glGetInteger(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_VERTEX_UNIFORM_COMPONENTS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_VERTEX_UNIFORM_VECTORS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_VERTEX_OUTPUT_COMPONENTS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_VERTEX_UNIFORM_BLOCKS));
    //    log.info("AAAAAAAA: {}", glGetVector2i(GL_MAX_VIEWPORT_DIMS).toString(NUMBER_FORMAT_INT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_VIEWPORTS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MINOR_VERSION));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_NUM_COMPRESSED_TEXTURE_FORMATS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_NUM_EXTENSIONS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_NUM_PROGRAM_BINARY_FORMATS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_NUM_SHADER_BINARY_FORMATS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_PACK_ALIGNMENT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_PACK_IMAGE_HEIGHT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_PACK_LSB_FIRST));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_PACK_ROW_LENGTH));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_PACK_SKIP_IMAGES));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_PACK_SKIP_PIXELS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_PACK_SKIP_ROWS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_PACK_SWAP_BYTES));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_PIXEL_PACK_BUFFER_BINDING));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_PIXEL_UNPACK_BUFFER_BINDING));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_POINT_FADE_THRESHOLD_SIZE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_PRIMITIVE_RESTART_INDEX));
    //    //log.info("AAAAAAAA: {}", glGetInteger(GL_PROGRAM_BINARY_FORMATS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_PROGRAM_PIPELINE_BINDING));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_PROGRAM_POINT_SIZE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_PROVOKING_VERTEX));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_POINT_SIZE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_POINT_SIZE_GRANULARITY));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_POINT_SIZE_RANGE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_POLYGON_OFFSET_FACTOR));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_POLYGON_OFFSET_UNITS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_POLYGON_OFFSET_FILL));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_POLYGON_OFFSET_LINE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_POLYGON_OFFSET_POINT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_POLYGON_SMOOTH));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_POLYGON_SMOOTH_HINT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_READ_BUFFER));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_RENDERBUFFER_BINDING));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_SAMPLE_BUFFERS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_SAMPLE_COVERAGE_VALUE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_SAMPLE_COVERAGE_INVERT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_SAMPLER_BINDING));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_SAMPLES));
    //    log.info("AAAAAAAA: {}", glGetVector4i(GL_SCISSOR_BOX).toString(NUMBER_FORMAT_INT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_SCISSOR_TEST));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_SHADER_COMPILER));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_SHADER_STORAGE_BUFFER_BINDING));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT));
    //    //log.info("AAAAAAAA: {}", glGetInteger(GL_SHADER_STORAGE_BUFFER_START));
    //    //log.info("AAAAAAAA: {}", glGetInteger(GL_SHADER_STORAGE_BUFFER_SIZE));
    //    log.info("AAAAAAAA: {}", glGetVector2i(GL_SMOOTH_LINE_WIDTH_RANGE).toString(NUMBER_FORMAT_INT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_SMOOTH_LINE_WIDTH_GRANULARITY));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_BACK_FAIL));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_BACK_FUNC));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_BACK_PASS_DEPTH_FAIL));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_BACK_PASS_DEPTH_PASS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_BACK_REF));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_BACK_VALUE_MASK));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_BACK_WRITEMASK));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_CLEAR_VALUE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_FAIL));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_FUNC));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_PASS_DEPTH_FAIL));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_PASS_DEPTH_PASS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_REF));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_TEST));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_VALUE_MASK));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STENCIL_WRITEMASK));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_STEREO));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_SUBPIXEL_BITS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TEXTURE_BINDING_1D));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TEXTURE_BINDING_1D_ARRAY));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TEXTURE_BINDING_2D));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TEXTURE_BINDING_2D_ARRAY));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TEXTURE_BINDING_2D_MULTISAMPLE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TEXTURE_BINDING_3D));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TEXTURE_BINDING_BUFFER));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TEXTURE_BINDING_CUBE_MAP));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TEXTURE_BINDING_RECTANGLE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TEXTURE_COMPRESSION_HINT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TEXTURE_BINDING_BUFFER));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TIMESTAMP));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_TRANSFORM_FEEDBACK_BUFFER_BINDING));
    //    //log.info("AAAAAAAA: {}", glGetInteger(GL_TRANSFORM_FEEDBACK_BUFFER_START));
    //    //log.info("AAAAAAAA: {}", glGetInteger(GL_TRANSFORM_FEEDBACK_BUFFER_SIZE));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_UNIFORM_BUFFER_BINDING));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT));
    //    //log.info("AAAAAAAA: {}", glGetInteger(GL_UNIFORM_BUFFER_SIZE));
    //    //log.info("AAAAAAAA: {}", glGetInteger(GL_UNIFORM_BUFFER_START));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_UNPACK_ALIGNMENT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_UNPACK_IMAGE_HEIGHT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_UNPACK_LSB_FIRST));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_UNPACK_ROW_LENGTH));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_UNPACK_SKIP_IMAGES));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_UNPACK_SKIP_PIXELS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_UNPACK_SKIP_ROWS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_UNPACK_SWAP_BYTES));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_VERTEX_ARRAY_BINDING));
    //    //log.info("AAAAAAAA: {}", glGetInteger(GL_VERTEX_BINDING_DIVISOR));
    //    //log.info("AAAAAAAA: {}", glGetInteger(GL_VERTEX_BINDING_OFFSET));
    //    //log.info("AAAAAAAA: {}", glGetInteger(GL_VERTEX_BINDING_STRIDE));
    //    //log.info("AAAAAAAA: {}", glGetInteger(GL_VERTEX_BINDING_BUFFER));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_VERTEX_ATTRIB_BINDINGS));
    //    log.info("AAAAAAAA: {}", glGetVector2i(GL_VIEWPORT).toString(NUMBER_FORMAT_INT));
    //    log.info("AAAAAAAA: {}", glGetVector2i(GL_VIEWPORT_BOUNDS_RANGE).toString(NUMBER_FORMAT_INT));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_VIEWPORT_INDEX_PROVOKING_VERTEX));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_VIEWPORT_SUBPIXEL_BITS));
    //    log.info("AAAAAAAA: {}", glGetInteger(GL_MAX_ELEMENT_INDEX));
    //    log.info("Max samples: {}", glGetInteger(GL_MAX_SAMPLES));
    //    log.info("Max max texture coordinates: {}", glGetInteger(GL_MAX_TEXTURE_COORDS));
    }

    private static Vector2i glGetVector2i(int parameterName) {
        int[] arr = new int[2];
        glGetIntegerv(parameterName, arr);
        return new Vector2i(arr[0], arr[1]);
    }

    private static Vector3i glGetVector3i(int parameterName) {
        int[] arr = new int[3];
        glGetIntegerv(parameterName, arr);
        return new Vector3i(arr[0], arr[1], arr[2]);
    }

    private static Vector4i glGetVector4i(int parameterName) {
        int[] arr = new int[4];
        glGetIntegerv(parameterName, arr);
        return new Vector4i(arr[0], arr[1], arr[2], arr[3]);
    }

    private static Vector3i glGetVector3iIndexed(int parameterName) {
        return new Vector3i(
                glGetIntegeri(parameterName, 0),
                glGetIntegeri(parameterName, 1),
                glGetIntegeri(parameterName, 2)
        );
    }

}
